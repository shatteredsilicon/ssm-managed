// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package models

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type serviceTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *serviceTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("services").
func (v *serviceTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *serviceTableType) Columns() []string {
	return []string{"id", "type", "node_id"}
}

// NewStruct makes a new struct for that view or table.
func (v *serviceTableType) NewStruct() reform.Struct {
	return new(Service)
}

// NewRecord makes a new record for that table.
func (v *serviceTableType) NewRecord() reform.Record {
	return new(Service)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *serviceTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// ServiceTable represents services view or table in SQL database.
var ServiceTable = &serviceTableType{
	s: parse.StructInfo{Type: "Service", SQLSchema: "", SQLName: "services", Fields: []parse.FieldInfo{{Name: "ID", Type: "int32", Column: "id"}, {Name: "Type", Type: "ServiceType", Column: "type"}, {Name: "NodeID", Type: "int32", Column: "node_id"}}, PKFieldIndex: 0},
	z: new(Service).Values(),
}

// String returns a string representation of this struct or record.
func (s Service) String() string {
	res := make([]string, 3)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "Type: " + reform.Inspect(s.Type, true)
	res[2] = "NodeID: " + reform.Inspect(s.NodeID, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Service) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.Type,
		s.NodeID,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Service) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.Type,
		&s.NodeID,
	}
}

// View returns View object for that struct.
func (s *Service) View() reform.View {
	return ServiceTable
}

// Table returns Table object for that record.
func (s *Service) Table() reform.Table {
	return ServiceTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Service) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Service) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Service) HasPK() bool {
	return s.ID != ServiceTable.z[ServiceTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *Service) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.ID = int32(i64)
	} else {
		s.ID = pk.(int32)
	}
}

// check interfaces
var (
	_ reform.View   = ServiceTable
	_ reform.Struct = (*Service)(nil)
	_ reform.Table  = ServiceTable
	_ reform.Record = (*Service)(nil)
	_ fmt.Stringer  = (*Service)(nil)
)

type rDSServiceTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *rDSServiceTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("services").
func (v *rDSServiceTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *rDSServiceTableType) Columns() []string {
	return []string{"id", "type", "node_id", "aws_access_key", "aws_secret_key", "address", "port", "engine", "engine_version"}
}

// NewStruct makes a new struct for that view or table.
func (v *rDSServiceTableType) NewStruct() reform.Struct {
	return new(RDSService)
}

// NewRecord makes a new record for that table.
func (v *rDSServiceTableType) NewRecord() reform.Record {
	return new(RDSService)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *rDSServiceTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// RDSServiceTable represents services view or table in SQL database.
var RDSServiceTable = &rDSServiceTableType{
	s: parse.StructInfo{Type: "RDSService", SQLSchema: "", SQLName: "services", Fields: []parse.FieldInfo{{Name: "ID", Type: "int32", Column: "id"}, {Name: "Type", Type: "ServiceType", Column: "type"}, {Name: "NodeID", Type: "int32", Column: "node_id"}, {Name: "AWSAccessKey", Type: "*string", Column: "aws_access_key"}, {Name: "AWSSecretKey", Type: "*string", Column: "aws_secret_key"}, {Name: "Address", Type: "*string", Column: "address"}, {Name: "Port", Type: "*uint16", Column: "port"}, {Name: "Engine", Type: "*string", Column: "engine"}, {Name: "EngineVersion", Type: "*string", Column: "engine_version"}}, PKFieldIndex: 0},
	z: new(RDSService).Values(),
}

// String returns a string representation of this struct or record.
func (s RDSService) String() string {
	res := make([]string, 9)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "Type: " + reform.Inspect(s.Type, true)
	res[2] = "NodeID: " + reform.Inspect(s.NodeID, true)
	res[3] = "AWSAccessKey: " + reform.Inspect(s.AWSAccessKey, true)
	res[4] = "AWSSecretKey: " + reform.Inspect(s.AWSSecretKey, true)
	res[5] = "Address: " + reform.Inspect(s.Address, true)
	res[6] = "Port: " + reform.Inspect(s.Port, true)
	res[7] = "Engine: " + reform.Inspect(s.Engine, true)
	res[8] = "EngineVersion: " + reform.Inspect(s.EngineVersion, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *RDSService) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.Type,
		s.NodeID,
		s.AWSAccessKey,
		s.AWSSecretKey,
		s.Address,
		s.Port,
		s.Engine,
		s.EngineVersion,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *RDSService) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.Type,
		&s.NodeID,
		&s.AWSAccessKey,
		&s.AWSSecretKey,
		&s.Address,
		&s.Port,
		&s.Engine,
		&s.EngineVersion,
	}
}

// View returns View object for that struct.
func (s *RDSService) View() reform.View {
	return RDSServiceTable
}

// Table returns Table object for that record.
func (s *RDSService) Table() reform.Table {
	return RDSServiceTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *RDSService) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *RDSService) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *RDSService) HasPK() bool {
	return s.ID != RDSServiceTable.z[RDSServiceTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *RDSService) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.ID = int32(i64)
	} else {
		s.ID = pk.(int32)
	}
}

// check interfaces
var (
	_ reform.View   = RDSServiceTable
	_ reform.Struct = (*RDSService)(nil)
	_ reform.Table  = RDSServiceTable
	_ reform.Record = (*RDSService)(nil)
	_ fmt.Stringer  = (*RDSService)(nil)
)

type rDSServiceDetailViewType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *rDSServiceDetailViewType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("services").
func (v *rDSServiceDetailViewType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *rDSServiceDetailViewType) Columns() []string {
	return []string{"region", "instance"}
}

// NewStruct makes a new struct for that view or table.
func (v *rDSServiceDetailViewType) NewStruct() reform.Struct {
	return new(RDSServiceDetail)
}

// RDSServiceDetailView represents services view or table in SQL database.
var RDSServiceDetailView = &rDSServiceDetailViewType{
	s: parse.StructInfo{Type: "RDSServiceDetail", SQLSchema: "", SQLName: "services", Fields: []parse.FieldInfo{{Name: "Region", Type: "string", Column: "region"}, {Name: "Instance", Type: "string", Column: "instance"}}, PKFieldIndex: -1},
	z: new(RDSServiceDetail).Values(),
}

// String returns a string representation of this struct or record.
func (s RDSServiceDetail) String() string {
	res := make([]string, 2)
	res[0] = "Region: " + reform.Inspect(s.Region, true)
	res[1] = "Instance: " + reform.Inspect(s.Instance, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *RDSServiceDetail) Values() []interface{} {
	return []interface{}{
		s.Region,
		s.Instance,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *RDSServiceDetail) Pointers() []interface{} {
	return []interface{}{
		&s.Region,
		&s.Instance,
	}
}

// View returns View object for that struct.
func (s *RDSServiceDetail) View() reform.View {
	return RDSServiceDetailView
}

// check interfaces
var (
	_ reform.View   = RDSServiceDetailView
	_ reform.Struct = (*RDSServiceDetail)(nil)
	_ fmt.Stringer  = (*RDSServiceDetail)(nil)
)

type postgreSQLServiceTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *postgreSQLServiceTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("services").
func (v *postgreSQLServiceTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *postgreSQLServiceTableType) Columns() []string {
	return []string{"id", "type", "node_id", "address", "port", "engine", "engine_version"}
}

// NewStruct makes a new struct for that view or table.
func (v *postgreSQLServiceTableType) NewStruct() reform.Struct {
	return new(PostgreSQLService)
}

// NewRecord makes a new record for that table.
func (v *postgreSQLServiceTableType) NewRecord() reform.Record {
	return new(PostgreSQLService)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *postgreSQLServiceTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// PostgreSQLServiceTable represents services view or table in SQL database.
var PostgreSQLServiceTable = &postgreSQLServiceTableType{
	s: parse.StructInfo{Type: "PostgreSQLService", SQLSchema: "", SQLName: "services", Fields: []parse.FieldInfo{{Name: "ID", Type: "int32", Column: "id"}, {Name: "Type", Type: "ServiceType", Column: "type"}, {Name: "NodeID", Type: "int32", Column: "node_id"}, {Name: "Address", Type: "*string", Column: "address"}, {Name: "Port", Type: "*uint16", Column: "port"}, {Name: "Engine", Type: "*string", Column: "engine"}, {Name: "EngineVersion", Type: "*string", Column: "engine_version"}}, PKFieldIndex: 0},
	z: new(PostgreSQLService).Values(),
}

// String returns a string representation of this struct or record.
func (s PostgreSQLService) String() string {
	res := make([]string, 7)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "Type: " + reform.Inspect(s.Type, true)
	res[2] = "NodeID: " + reform.Inspect(s.NodeID, true)
	res[3] = "Address: " + reform.Inspect(s.Address, true)
	res[4] = "Port: " + reform.Inspect(s.Port, true)
	res[5] = "Engine: " + reform.Inspect(s.Engine, true)
	res[6] = "EngineVersion: " + reform.Inspect(s.EngineVersion, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *PostgreSQLService) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.Type,
		s.NodeID,
		s.Address,
		s.Port,
		s.Engine,
		s.EngineVersion,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *PostgreSQLService) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.Type,
		&s.NodeID,
		&s.Address,
		&s.Port,
		&s.Engine,
		&s.EngineVersion,
	}
}

// View returns View object for that struct.
func (s *PostgreSQLService) View() reform.View {
	return PostgreSQLServiceTable
}

// Table returns Table object for that record.
func (s *PostgreSQLService) Table() reform.Table {
	return PostgreSQLServiceTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *PostgreSQLService) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *PostgreSQLService) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *PostgreSQLService) HasPK() bool {
	return s.ID != PostgreSQLServiceTable.z[PostgreSQLServiceTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *PostgreSQLService) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.ID = int32(i64)
	} else {
		s.ID = pk.(int32)
	}
}

// check interfaces
var (
	_ reform.View   = PostgreSQLServiceTable
	_ reform.Struct = (*PostgreSQLService)(nil)
	_ reform.Table  = PostgreSQLServiceTable
	_ reform.Record = (*PostgreSQLService)(nil)
	_ fmt.Stringer  = (*PostgreSQLService)(nil)
)

type mySQLServiceTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *mySQLServiceTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("services").
func (v *mySQLServiceTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *mySQLServiceTableType) Columns() []string {
	return []string{"id", "type", "node_id", "address", "port", "engine", "engine_version"}
}

// NewStruct makes a new struct for that view or table.
func (v *mySQLServiceTableType) NewStruct() reform.Struct {
	return new(MySQLService)
}

// NewRecord makes a new record for that table.
func (v *mySQLServiceTableType) NewRecord() reform.Record {
	return new(MySQLService)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *mySQLServiceTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// MySQLServiceTable represents services view or table in SQL database.
var MySQLServiceTable = &mySQLServiceTableType{
	s: parse.StructInfo{Type: "MySQLService", SQLSchema: "", SQLName: "services", Fields: []parse.FieldInfo{{Name: "ID", Type: "int32", Column: "id"}, {Name: "Type", Type: "ServiceType", Column: "type"}, {Name: "NodeID", Type: "int32", Column: "node_id"}, {Name: "Address", Type: "*string", Column: "address"}, {Name: "Port", Type: "*uint16", Column: "port"}, {Name: "Engine", Type: "*string", Column: "engine"}, {Name: "EngineVersion", Type: "*string", Column: "engine_version"}}, PKFieldIndex: 0},
	z: new(MySQLService).Values(),
}

// String returns a string representation of this struct or record.
func (s MySQLService) String() string {
	res := make([]string, 7)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "Type: " + reform.Inspect(s.Type, true)
	res[2] = "NodeID: " + reform.Inspect(s.NodeID, true)
	res[3] = "Address: " + reform.Inspect(s.Address, true)
	res[4] = "Port: " + reform.Inspect(s.Port, true)
	res[5] = "Engine: " + reform.Inspect(s.Engine, true)
	res[6] = "EngineVersion: " + reform.Inspect(s.EngineVersion, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *MySQLService) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.Type,
		s.NodeID,
		s.Address,
		s.Port,
		s.Engine,
		s.EngineVersion,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *MySQLService) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.Type,
		&s.NodeID,
		&s.Address,
		&s.Port,
		&s.Engine,
		&s.EngineVersion,
	}
}

// View returns View object for that struct.
func (s *MySQLService) View() reform.View {
	return MySQLServiceTable
}

// Table returns Table object for that record.
func (s *MySQLService) Table() reform.Table {
	return MySQLServiceTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *MySQLService) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *MySQLService) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *MySQLService) HasPK() bool {
	return s.ID != MySQLServiceTable.z[MySQLServiceTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *MySQLService) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.ID = int32(i64)
	} else {
		s.ID = pk.(int32)
	}
}

// check interfaces
var (
	_ reform.View   = MySQLServiceTable
	_ reform.Struct = (*MySQLService)(nil)
	_ reform.Table  = MySQLServiceTable
	_ reform.Record = (*MySQLService)(nil)
	_ fmt.Stringer  = (*MySQLService)(nil)
)

type remoteServiceTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *remoteServiceTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("services").
func (v *remoteServiceTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *remoteServiceTableType) Columns() []string {
	return []string{"id", "type", "node_id", "address", "port", "engine", "engine_version"}
}

// NewStruct makes a new struct for that view or table.
func (v *remoteServiceTableType) NewStruct() reform.Struct {
	return new(RemoteService)
}

// NewRecord makes a new record for that table.
func (v *remoteServiceTableType) NewRecord() reform.Record {
	return new(RemoteService)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *remoteServiceTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// RemoteServiceTable represents services view or table in SQL database.
var RemoteServiceTable = &remoteServiceTableType{
	s: parse.StructInfo{Type: "RemoteService", SQLSchema: "", SQLName: "services", Fields: []parse.FieldInfo{{Name: "ID", Type: "int32", Column: "id"}, {Name: "Type", Type: "ServiceType", Column: "type"}, {Name: "NodeID", Type: "int32", Column: "node_id"}, {Name: "Address", Type: "*string", Column: "address"}, {Name: "Port", Type: "*uint16", Column: "port"}, {Name: "Engine", Type: "*string", Column: "engine"}, {Name: "EngineVersion", Type: "*string", Column: "engine_version"}}, PKFieldIndex: 0},
	z: new(RemoteService).Values(),
}

// String returns a string representation of this struct or record.
func (s RemoteService) String() string {
	res := make([]string, 7)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "Type: " + reform.Inspect(s.Type, true)
	res[2] = "NodeID: " + reform.Inspect(s.NodeID, true)
	res[3] = "Address: " + reform.Inspect(s.Address, true)
	res[4] = "Port: " + reform.Inspect(s.Port, true)
	res[5] = "Engine: " + reform.Inspect(s.Engine, true)
	res[6] = "EngineVersion: " + reform.Inspect(s.EngineVersion, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *RemoteService) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.Type,
		s.NodeID,
		s.Address,
		s.Port,
		s.Engine,
		s.EngineVersion,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *RemoteService) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.Type,
		&s.NodeID,
		&s.Address,
		&s.Port,
		&s.Engine,
		&s.EngineVersion,
	}
}

// View returns View object for that struct.
func (s *RemoteService) View() reform.View {
	return RemoteServiceTable
}

// Table returns Table object for that record.
func (s *RemoteService) Table() reform.Table {
	return RemoteServiceTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *RemoteService) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *RemoteService) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *RemoteService) HasPK() bool {
	return s.ID != RemoteServiceTable.z[RemoteServiceTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *RemoteService) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.ID = int32(i64)
	} else {
		s.ID = pk.(int32)
	}
}

// check interfaces
var (
	_ reform.View   = RemoteServiceTable
	_ reform.Struct = (*RemoteService)(nil)
	_ reform.Table  = RemoteServiceTable
	_ reform.Record = (*RemoteService)(nil)
	_ fmt.Stringer  = (*RemoteService)(nil)
)

type fullServiceTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *fullServiceTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("services").
func (v *fullServiceTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *fullServiceTableType) Columns() []string {
	return []string{"id", "type", "node_id", "aws_access_key", "aws_secret_key", "address", "port", "engine", "engine_version"}
}

// NewStruct makes a new struct for that view or table.
func (v *fullServiceTableType) NewStruct() reform.Struct {
	return new(FullService)
}

// NewRecord makes a new record for that table.
func (v *fullServiceTableType) NewRecord() reform.Record {
	return new(FullService)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *fullServiceTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// FullServiceTable represents services view or table in SQL database.
var FullServiceTable = &fullServiceTableType{
	s: parse.StructInfo{Type: "FullService", SQLSchema: "", SQLName: "services", Fields: []parse.FieldInfo{{Name: "ID", Type: "int32", Column: "id"}, {Name: "Type", Type: "ServiceType", Column: "type"}, {Name: "NodeID", Type: "int32", Column: "node_id"}, {Name: "AWSAccessKey", Type: "*string", Column: "aws_access_key"}, {Name: "AWSSecretKey", Type: "*string", Column: "aws_secret_key"}, {Name: "Address", Type: "*string", Column: "address"}, {Name: "Port", Type: "*uint16", Column: "port"}, {Name: "Engine", Type: "*string", Column: "engine"}, {Name: "EngineVersion", Type: "*string", Column: "engine_version"}}, PKFieldIndex: 0},
	z: new(FullService).Values(),
}

// String returns a string representation of this struct or record.
func (s FullService) String() string {
	res := make([]string, 9)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "Type: " + reform.Inspect(s.Type, true)
	res[2] = "NodeID: " + reform.Inspect(s.NodeID, true)
	res[3] = "AWSAccessKey: " + reform.Inspect(s.AWSAccessKey, true)
	res[4] = "AWSSecretKey: " + reform.Inspect(s.AWSSecretKey, true)
	res[5] = "Address: " + reform.Inspect(s.Address, true)
	res[6] = "Port: " + reform.Inspect(s.Port, true)
	res[7] = "Engine: " + reform.Inspect(s.Engine, true)
	res[8] = "EngineVersion: " + reform.Inspect(s.EngineVersion, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *FullService) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.Type,
		s.NodeID,
		s.AWSAccessKey,
		s.AWSSecretKey,
		s.Address,
		s.Port,
		s.Engine,
		s.EngineVersion,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *FullService) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.Type,
		&s.NodeID,
		&s.AWSAccessKey,
		&s.AWSSecretKey,
		&s.Address,
		&s.Port,
		&s.Engine,
		&s.EngineVersion,
	}
}

// View returns View object for that struct.
func (s *FullService) View() reform.View {
	return FullServiceTable
}

// Table returns Table object for that record.
func (s *FullService) Table() reform.Table {
	return FullServiceTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *FullService) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *FullService) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *FullService) HasPK() bool {
	return s.ID != FullServiceTable.z[FullServiceTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *FullService) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.ID = int32(i64)
	} else {
		s.ID = pk.(int32)
	}
}

// check interfaces
var (
	_ reform.View   = FullServiceTable
	_ reform.Struct = (*FullService)(nil)
	_ reform.Table  = FullServiceTable
	_ reform.Record = (*FullService)(nil)
	_ fmt.Stringer  = (*FullService)(nil)
)

func init() {
	parse.AssertUpToDate(&ServiceTable.s, new(Service))
	parse.AssertUpToDate(&RDSServiceTable.s, new(RDSService))
	parse.AssertUpToDate(&RDSServiceDetailView.s, new(RDSServiceDetail))
	parse.AssertUpToDate(&PostgreSQLServiceTable.s, new(PostgreSQLService))
	parse.AssertUpToDate(&MySQLServiceTable.s, new(MySQLService))
	parse.AssertUpToDate(&RemoteServiceTable.s, new(RemoteService))
	parse.AssertUpToDate(&FullServiceTable.s, new(FullService))
}
