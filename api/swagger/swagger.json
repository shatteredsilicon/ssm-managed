{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "title": "annotations.proto",
    "version": "version not set"
  },
  "paths": {
    "/v0/annotations": {
      "post": {
        "tags": [
          "Annotations"
        ],
        "operationId": "Create",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiAnnotationsCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/apiAnnotationsCreateResponse"
            }
          }
        }
      }
    },
    "/v0/error": {
      "get": {
        "tags": [
          "Demo"
        ],
        "operationId": "Error",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "name": "code",
            "in": "query"
          },
          {
            "type": "string",
            "name": "key",
            "in": "query"
          },
          {
            "type": "string",
            "name": "value",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/apiDemoErrorResponse"
            }
          }
        }
      }
    },
    "/v0/logs": {
      "get": {
        "tags": [
          "Logs"
        ],
        "summary": "All returns last lines of all log files.",
        "operationId": "All",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/apiLogsAllResponse"
            }
          }
        }
      }
    },
    "/v0/mysql": {
      "get": {
        "tags": [
          "MySQL"
        ],
        "operationId": "List",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/apiMySQLListResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "MySQL"
        ],
        "operationId": "Add",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiMySQLAddRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/apiMySQLAddResponse"
            }
          }
        }
      }
    },
    "/v0/mysql/{id}": {
      "delete": {
        "tags": [
          "MySQL"
        ],
        "operationId": "Remove",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/apiMySQLRemoveResponse"
            }
          }
        }
      }
    },
    "/v0/postgresql": {
      "get": {
        "tags": [
          "PostgreSQL"
        ],
        "operationId": "ListMixin4",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/apiPostgreSQLListResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "PostgreSQL"
        ],
        "operationId": "AddMixin4",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPostgreSQLAddRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/apiPostgreSQLAddResponse"
            }
          }
        }
      }
    },
    "/v0/postgresql/{id}": {
      "delete": {
        "tags": [
          "PostgreSQL"
        ],
        "operationId": "RemoveMixin4",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/apiPostgreSQLRemoveResponse"
            }
          }
        }
      }
    },
    "/v0/rds": {
      "get": {
        "tags": [
          "RDS"
        ],
        "operationId": "ListMixin5",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/apiRDSListResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "RDS"
        ],
        "operationId": "AddMixin5",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiRDSAddRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/apiRDSAddResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "RDS"
        ],
        "operationId": "RemoveMixin5",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiRDSRemoveRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/apiRDSRemoveResponse"
            }
          }
        }
      }
    },
    "/v0/rds/detail": {
      "get": {
        "tags": [
          "RDS"
        ],
        "operationId": "Detail",
        "parameters": [
          {
            "type": "string",
            "name": "qan_db_instance_uuid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "server_username",
            "in": "query"
          },
          {
            "type": "string",
            "name": "server_password",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/apiRDSDetailResponse"
            }
          }
        }
      }
    },
    "/v0/rds/discover": {
      "post": {
        "tags": [
          "RDS"
        ],
        "operationId": "Discover",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiRDSDiscoverRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/apiRDSDiscoverResponse"
            }
          }
        }
      }
    },
    "/v0/remote": {
      "get": {
        "tags": [
          "Remote"
        ],
        "operationId": "ListMixin6",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/apiRemoteListResponse"
            }
          }
        }
      }
    },
    "/v0/scrape-configs": {
      "get": {
        "tags": [
          "ScrapeConfigs"
        ],
        "summary": "List returns all scrape configs.",
        "operationId": "ListMixin7",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/apiScrapeConfigsListResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "ScrapeConfigs"
        ],
        "summary": "Create creates a new scrape config.\nErrors: InvalidArgument(3) if some argument is not valid,\nAlreadyExists(6) if scrape config with that job name is already present,\nFailedPrecondition(9) if reachability check was requested and some scrape target can't be reached.",
        "operationId": "CreateMixin7",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiScrapeConfigsCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/apiScrapeConfigsCreateResponse"
            }
          }
        }
      }
    },
    "/v0/scrape-configs/{job_name}": {
      "get": {
        "tags": [
          "ScrapeConfigs"
        ],
        "summary": "Get returns a scrape config by job name.\nErrors: NotFound(5) if no such scrape config is present.",
        "operationId": "Get",
        "parameters": [
          {
            "type": "string",
            "name": "job_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/apiScrapeConfigsGetResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ScrapeConfigs"
        ],
        "summary": "Delete removes existing scrape config by job name.\nErrors: NotFound(5) if no such scrape config is present.",
        "operationId": "Delete",
        "parameters": [
          {
            "type": "string",
            "name": "job_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/apiScrapeConfigsDeleteResponse"
            }
          }
        }
      }
    },
    "/v0/scrape-configs/{scrape_config.job_name}": {
      "put": {
        "tags": [
          "ScrapeConfigs"
        ],
        "summary": "Update updates existing scrape config by job name.\nErrors: InvalidArgument(3) if some argument is not valid,\nNotFound(5) if no such scrape config is present,\nFailedPrecondition(9) if reachability check was requested and some scrape target can't be reached.",
        "operationId": "Update",
        "parameters": [
          {
            "type": "string",
            "description": "The job name assigned to scraped metrics by default: \"example-job\" (required)",
            "name": "scrape_config.job_name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiScrapeConfigsUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/apiScrapeConfigsUpdateResponse"
            }
          }
        }
      }
    },
    "/v1/version": {
      "get": {
        "tags": [
          "Base"
        ],
        "operationId": "Version",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/apiBaseVersionResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ScrapeTargetHealthHealth": {
      "description": "Target health : unknown, down, or up.",
      "type": "string",
      "default": "UNKNOWN",
      "enum": [
        "UNKNOWN",
        "DOWN",
        "UP"
      ]
    },
    "apiAnnotationsCreateRequest": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "text": {
          "type": "string"
        }
      }
    },
    "apiAnnotationsCreateResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "apiBaseVersionResponse": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        }
      }
    },
    "apiBasicAuth": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "apiDemoErrorResponse": {
      "type": "object"
    },
    "apiLabelPair": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Label name"
        },
        "value": {
          "type": "string",
          "title": "Label value"
        }
      }
    },
    "apiLog": {
      "type": "object",
      "properties": {
        "lines": {
          "type": "array",
          "title": "Last lines of log file",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "apiLogsAllResponse": {
      "type": "object",
      "properties": {
        "logs": {
          "type": "object",
          "title": "Maps log file name to content",
          "additionalProperties": {
            "$ref": "#/definitions/apiLog"
          }
        }
      }
    },
    "apiMySQLAddRequest": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "apiMySQLAddResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "apiMySQLInstance": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/apiMySQLNode"
        },
        "service": {
          "$ref": "#/definitions/apiMySQLService"
        }
      }
    },
    "apiMySQLListResponse": {
      "type": "object",
      "properties": {
        "instances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiMySQLInstance"
          }
        }
      }
    },
    "apiMySQLNode": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "apiMySQLRemoveResponse": {
      "type": "object"
    },
    "apiMySQLService": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "engine": {
          "type": "string"
        },
        "engine_version": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "apiPostgreSQLAddRequest": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "apiPostgreSQLAddResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "apiPostgreSQLInstance": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/apiPostgreSQLNode"
        },
        "service": {
          "$ref": "#/definitions/apiPostgreSQLService"
        }
      }
    },
    "apiPostgreSQLListResponse": {
      "type": "object",
      "properties": {
        "instances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiPostgreSQLInstance"
          }
        }
      }
    },
    "apiPostgreSQLNode": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "apiPostgreSQLRemoveResponse": {
      "type": "object"
    },
    "apiPostgreSQLService": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "engine": {
          "type": "string"
        },
        "engine_version": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "apiRDSAddRequest": {
      "type": "object",
      "properties": {
        "aws_access_key_id": {
          "type": "string"
        },
        "aws_secret_access_key": {
          "type": "string"
        },
        "id": {
          "$ref": "#/definitions/apiRDSInstanceID"
        },
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "apiRDSAddResponse": {
      "type": "object"
    },
    "apiRDSDetailResponse": {
      "type": "object",
      "properties": {
        "aws_access_key_id": {
          "type": "string"
        },
        "aws_secret_access_key": {
          "type": "string"
        },
        "instance": {
          "type": "string"
        },
        "region": {
          "type": "string"
        }
      }
    },
    "apiRDSDiscoverRequest": {
      "type": "object",
      "properties": {
        "aws_access_key_id": {
          "type": "string"
        },
        "aws_secret_access_key": {
          "type": "string"
        }
      }
    },
    "apiRDSDiscoverResponse": {
      "type": "object",
      "properties": {
        "instances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiRDSInstance"
          }
        }
      }
    },
    "apiRDSInstance": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/apiRDSNode"
        },
        "service": {
          "$ref": "#/definitions/apiRDSService"
        }
      }
    },
    "apiRDSInstanceID": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "region": {
          "type": "string"
        }
      }
    },
    "apiRDSListResponse": {
      "type": "object",
      "properties": {
        "instances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiRDSInstance"
          }
        }
      }
    },
    "apiRDSNode": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "region": {
          "type": "string"
        }
      }
    },
    "apiRDSRemoveRequest": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/apiRDSInstanceID"
        }
      }
    },
    "apiRDSRemoveResponse": {
      "type": "object"
    },
    "apiRDSService": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "engine": {
          "type": "string"
        },
        "engine_version": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "apiRemoteInstance": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/apiRemoteNode"
        },
        "service": {
          "$ref": "#/definitions/apiRemoteService"
        }
      }
    },
    "apiRemoteListResponse": {
      "type": "object",
      "properties": {
        "instances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiRemoteInstance"
          }
        }
      }
    },
    "apiRemoteNode": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "region": {
          "type": "string"
        }
      }
    },
    "apiRemoteService": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "engine": {
          "type": "string"
        },
        "engine_version": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "apiScrapeConfig": {
      "type": "object",
      "properties": {
        "basic_auth": {
          "title": "Sets the `Authorization` header on every scrape request with the configured username and password",
          "$ref": "#/definitions/apiBasicAuth"
        },
        "job_name": {
          "type": "string",
          "title": "The job name assigned to scraped metrics by default: \"example-job\" (required)"
        },
        "metrics_path": {
          "type": "string",
          "title": "The HTTP resource path on which to fetch metrics from targets: \"/metrics\""
        },
        "scheme": {
          "type": "string",
          "title": "Configures the protocol scheme used for requests: \"http\" or \"https\""
        },
        "scrape_interval": {
          "type": "string",
          "title": "How frequently to scrape targets from this job: \"10s\""
        },
        "scrape_timeout": {
          "type": "string",
          "title": "Per-scrape timeout when scraping this job: \"5s\""
        },
        "static_configs": {
          "type": "array",
          "title": "List of labeled statically configured targets for this job",
          "items": {
            "$ref": "#/definitions/apiStaticConfig"
          }
        },
        "tls_config": {
          "title": "Configures the scrape request's TLS settings",
          "$ref": "#/definitions/apiTLSConfig"
        }
      }
    },
    "apiScrapeConfigsCreateRequest": {
      "type": "object",
      "properties": {
        "check_reachability": {
          "type": "boolean",
          "format": "boolean",
          "title": "Check that added targets can be scraped from PMM Server"
        },
        "scrape_config": {
          "$ref": "#/definitions/apiScrapeConfig"
        }
      }
    },
    "apiScrapeConfigsCreateResponse": {
      "type": "object"
    },
    "apiScrapeConfigsDeleteResponse": {
      "type": "object"
    },
    "apiScrapeConfigsGetResponse": {
      "type": "object",
      "properties": {
        "scrape_config": {
          "$ref": "#/definitions/apiScrapeConfig"
        },
        "scrape_targets_health": {
          "type": "array",
          "title": "Scrape targets health for this scrape job",
          "items": {
            "$ref": "#/definitions/apiScrapeTargetHealth"
          }
        }
      }
    },
    "apiScrapeConfigsListResponse": {
      "type": "object",
      "properties": {
        "scrape_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiScrapeConfig"
          }
        },
        "scrape_targets_health": {
          "type": "array",
          "title": "Scrape targets health for all managed scrape jobs",
          "items": {
            "$ref": "#/definitions/apiScrapeTargetHealth"
          }
        }
      }
    },
    "apiScrapeConfigsUpdateRequest": {
      "type": "object",
      "properties": {
        "check_reachability": {
          "type": "boolean",
          "format": "boolean",
          "title": "Check that added targets can be scraped from PMM Server"
        },
        "scrape_config": {
          "$ref": "#/definitions/apiScrapeConfig"
        }
      }
    },
    "apiScrapeConfigsUpdateResponse": {
      "type": "object"
    },
    "apiScrapeTargetHealth": {
      "description": "ScrapeTargetHealth represents Prometheus scrape target health: unknown, down, or up.",
      "type": "object",
      "properties": {
        "health": {
          "$ref": "#/definitions/ScrapeTargetHealthHealth"
        },
        "instance": {
          "type": "string",
          "title": "\"instance\" label value, may be different from target due to relabeling"
        },
        "job": {
          "type": "string",
          "title": "\"job\" label value, may be different from job_name due to relabeling"
        },
        "job_name": {
          "type": "string",
          "title": "Original scrape job name"
        },
        "target": {
          "type": "string",
          "title": "Original target"
        }
      }
    },
    "apiStaticConfig": {
      "type": "object",
      "properties": {
        "labels": {
          "type": "array",
          "title": "Labels assigned to all metrics scraped from the targets",
          "items": {
            "$ref": "#/definitions/apiLabelPair"
          }
        },
        "targets": {
          "type": "array",
          "title": "Hostnames or IPs followed by an optional port number: \"1.2.3.4:9090\"",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "apiTLSConfig": {
      "type": "object",
      "properties": {
        "insecure_skip_verify": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    }
  }
}
