// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	service "github.com/percona/kardianos-service"
	mock "github.com/stretchr/testify/mock"
)

// Supervisor is an autogenerated mock type for the Supervisor type
type Supervisor struct {
	mock.Mock
}

// Start provides a mock function with given fields: ctx, config
func (_m *Supervisor) Start(ctx context.Context, config *service.Config) error {
	ret := _m.Called(ctx, config)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *service.Config) error); ok {
		r0 = rf(ctx, config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Status provides a mock function with given fields: ctx, name
func (_m *Supervisor) Status(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields: ctx, name
func (_m *Supervisor) Stop(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
